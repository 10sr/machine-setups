---
- name: Setup sakura
  hosts: default
  vars:
    # Do not use these variables directly in roles!
    _ubuntu_codename: xenial
    _domain_name: 3ends.info
    # domain_name: "tk2-407-44672.vs.sakura.ne.jp"
    _revision_timestamp_file: /machine_setups_revision_timestamp.txt
    _this_revision_timestamp: "{{ lookup('env', 'THIS_REVISION_TIMESTAMP') | int }}"
    _revision_yaml: /machine_setups_revision.yaml
    _this_revision:
      id: "{{ lookup('env', 'THIS_REVISION_ID') }}"
      subject: "{{ lookup('env', 'THIS_REVISION_SUBJECT') }}"
      repository_url: https://github.com/10sr/machine_setups.git
      ansible_version: "{{ ansible_version.full }}"

  pre_tasks:
    - name: Include all vault variables
      include_vars:
        dir: ./vault/
        name: _vault
      no_log: yes

    - name: Set ansible_become_pass
      set_fact:
        ansible_become_pass: "{{ _vault.ansible_become_pass }}"
        cachable: yes
      no_log: yes

    - name: Load previous revision
      # Do nothing when the file does not exist
      shell: "! test -f {{ _revision_timestamp_file }} || cat {{ _revision_timestamp_file }}"
      register: _shell_previous_revision_timestamp
      changed_when: no

    - name: Check revision timestamp
      assert:
        that:
          - _this_revision_timestamp|int > 0
          - _shell_previous_revision_timestamp.stdout|int <= _this_revision_timestamp|int

    - name: Check codename
      assert:
        that:
          - _ubuntu_codename == ansible_lsb.codename
          - _ubuntu_codename == ansible_distribution_release

    - name: Install some prerequisite packages
      apt:
        name:
          - git
          - nginx
      become: yes

  roles:
    # TODO: Add vars: and move variable definitions there
    - role: timezone
      timezone_name: UTC
    # - role: hostname
    #   hostname: "{{ _domain_name }}"
    - role: locale
      locale_locales:
        - ja_JP.UTF-8
        - en_US.UTF-8
      locale_default: en_US.UTF-8

    - role: sosreport

    - role: letsencrypt
      letsencrypt_register_email: 8.slashes@gmail.com
      letsencrypt_domain_names:
        - "{{ _domain_name }}"
        - af.{{ _domain_name }}
        - st.{{ _domain_name }}
        - minio.st.{{ _domain_name }}
        - nc.{{ _domain_name }}
        - px.{{ _domain_name }}
        - jk.{{ _domain_name }}
        - gt.{{ _domain_name }}
        - gb.{{ _domain_name }}
        - prometheus-node-exporter.{{ _domain_name }}
        - pt.{{ _domain_name }}
        - gf.{{ _domain_name }}
        - k8s.{{ _domain_name }}
      letsencrypt_webroot: /var/nginx/main
      letsencrypt_certname: "{{ _domain_name }}"
      letsencrypt_key_dir: /etc/letsencrypt/live/{{ _domain_name }}
      letsencrypt_ssl_key_dir: /etc/letsencrypt/live/{{ _domain_name }}
      letsencrypt_ssl_dhparam_path: /etc/ssl/private/dhparam.pem

    - role: nginx

      nginx_basic_auth_htpasswd:
        - path: /etc/nginx/prometheus_node_exporter.htpasswd
          entries:
            - name: prometheus_node_exporter
              password: "{{ _vault.prometheus_node_exporter_password }}"
        - path: /etc/nginx/prometheus_web.htpasswd
          entries:
            - name: pt
              password: "{{ _vault.prometheus_web_password }}"
        - path: /etc/nginx/kubernetes_dashboard.htpasswd
          entries:
            - name: dash
              password: "{{ _vault.kubernetes_dashboard_password }}"

      # non ssl
      nginx_default_root: /var/nginx/main
      nginx_name_ssl_only:
        - "af.{{ _domain_name }}"
        - "nc.{{ _domain_name }}"
        - "gt.{{ _domain_name }}"
        - "gb.{{ _domain_name }}"
        - "pt.{{ _domain_name }}"
        - "k8s.{{ _domain_name }}"
      nginx_host_proxies:
        - name: gl.{{ _domain_name }}
          port: 8800
        - name: k8s-nginx.{{ _domain_name }}
          port: 30081
      nginx_proxy_upstreams: []

      # ssl
      nginx_ssl_default_root: /var/nginx/main
      nginx_ssl_proxy_upstreams:
        - path: /10sr_bot
          port: 5000
        - path: /wiki
          port: 2500
          additional_directives:
            - "proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for"
            - "proxy_set_header Host $host"
            - "proxy_set_header X-Forwarded-Proto $scheme"
            - "proxy_set_header X-Real-IP $remote_addr"
            # - "proxy_redirect default"
        - path: /trigger
          port: 8980
          additional_directives:
            - "proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for"
            - "proxy_set_header X-Forwarded-Host $host"
            - "proxy_set_header X-Forwarded-Server $host"
            - "proxy_set_header X-Forwarded-Proto $scheme"
            - "proxy_set_header X-Real-IP $remote_addr"
        - path: /webtools
          port: 30770
          additional_directives:
            - "client_max_body_size 10M"
            - "proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for"
            - "proxy_set_header X-Forwarded-Host $host"
            - "proxy_set_header X-Forwarded-Server $host"
            - "proxy_set_header X-Forwarded-Proto $scheme"
            - "proxy_set_header X-Real-IP $remote_addr"
        - path: /bucket-webtools-static
          port: 30009
      nginx_ssl_host_proxies:
        - name: "af.{{ _domain_name }}"
          port: 8999
        - name: "nc.{{ _domain_name }}"
          port: 8888
          additional_directives:
            - "proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for"
            - "proxy_set_header X-Forwarded-Host $host"
            - "proxy_set_header X-Forwarded-Server $host"
            - "proxy_set_header X-Forwarded-Proto $scheme"
            - "proxy_set_header X-Real-IP $remote_addr"
        - name: "px.{{ _domain_name }}"
          port: 32400
        - name: gt.{{ _domain_name }}
          port: 3300
        - name: gb.{{ _domain_name }}
          port: 9080
        - name: prometheus-node-exporter.{{ _domain_name }}
          port: 9100
          additional_directives:
            - auth_basic "prometheus_node_exporter"
            - auth_basic_user_file /etc/nginx/prometheus_node_exporter.htpasswd
        - name: pt.{{ _domain_name }}
          port: 30089
          additional_directives:
            - auth_basic "pt"
            - auth_basic_user_file /etc/nginx/prometheus_web.htpasswd
        - name: gf.{{ _domain_name }}
          port: 30003
        - name: k8s.{{ _domain_name }}
          port: 30090
          additional_directives:
            - auth_basic "dash"
            - auth_basic_user_file /etc/nginx/kubernetes_dashboard.htpasswd

    - role: docker
      docker_ubuntu_codename: "{{ _ubuntu_codename }}"
      docker_compose_path: ./docker-compose
      docker_compose_env:
        airflow0:
          AIRFLOW__CORE__SQL_ALCHEMY_CONN: mysql+mysqldb://airflow:{{ _vault.mysql_password_airflow }}@172.17.0.1:3306/airflow?charset=ascii
          # mariadb dialect will be available after:
          # https://github.com/sqlalchemy/sqlalchemy/commit/cd03b8f0cecbf72ecd6c99c4d3a6338c8278b40d
          # AIRFLOW__CORE__SQL_ALCHEMY_CONN: mariadb+mysqldb://airflow:{{ _vault.mysql_password_airflow }}@172.17.0.1:3306/airflow?charset=ascii
          AIRFLOW__WEBSERVER__BASE_URL: https://af.{{ _domain_name }}
          AIRFLOW__CORE__FERNET_KEY: "{{ _vault.airflow_fernet_key }}"
        ghost0:
          NGINX_SERVER_NAME: "b.{{ _domain_name }}"
        ghost0:
          NGINX_SERVER_NAME: "b.{{ _domain_name }}"
        instiki0:
          NGINX_SERVER_NAME: "{{ _domain_name }}"
        10sr_bot0:
          TWITTER_KEY: VmHRoeyCxmGisuGPCBADVfo6v
          TWITTER_SECRET: "{{ _vault.bot_twitter_secret }}"
          TWITTER_TOKEN: 2578716006-LhQWcRQyG5r0uC92yLwy1LYhNIPGMVXAy4CWOpt
          TWITTER_TOKEN_SECRET: "{{ _vault.bot_twitter_token_secret }}"
          POST_BEARER_TOKEN: "{{ _vault.bot_post_bearer_token }}"
        mastodon0:
          NGINX_SERVER_NAME: "st.{{ _domain_name }}"
          NGINX_S3_SERVER_NAME: "minio.st.{{ _domain_name }}"
          NGINX_SERVER_PORT: 3000
          NGINX_S3_SERVER_PORT: 9000
          PAPERCLIP_SECRET: "{{ _vault.mastodon_paperclip_secret }}"
          SECRET_KEY_BASE: "{{ _vault.mastodon_secret_key_base }}"
          OTP_SECRET: "{{ _vault.mastodon_otp_secret }}"
          SMTP_PASSWORD: "{{ _vault.postfix_smtp_password }}"
          AWS_ACCESS_KEY_ID: 66aa7319
          AWS_SECRET_ACCESS_KEY: "{{ _vault.mastodon_minio_secret_key }}"
          MINIO_ACCESS_KEY: 66aa7319
          MINIO_SECRET_KEY: "{{ _vault.mastodon_minio_secret_key }}"
          S3_HOSTNAME: minio.st.{{ _domain_name }}
          # CRON_JS_MAILTO: 8.slashes@gmail.com
          # CRON_JS_SMTP_HOST: smtp.mailgun.org
          # CRON_JS_SMTP_PORT: 587
          # CRON_JS_SMTP_USER: postmaster@m.3ends.info
          # CRON_JS_SMTP_PASS: "{{ postfix_smtp_password }}"
        nextcloud0:
          MYSQL_USER: nextcloud
          MYSQL_ROOT_PASSWORD: "{{ _vault.nextcloud_mysql_root_password }}"
          MYSQL_DATABASE: nextcloud
          MYSQL_PASSWORD: "{{ _vault.nextcloud_mysql_password }}"
          VIRTUAL_HOST: "nc.{{ _domain_name }}"
        prometheus0:
          NODE_EXPORTER_PASSWORD: "{{ _vault.prometheus_node_exporter_password }}"
          AM_EMAIL_TO: 8.slashes@gmail.com
          AM_EMAIL_FROM: postmaster@m.3ends.info
          AM_SMTP_SMARTHOST: smtp.mailgun.org:587
          AM_SMTP_USERNAME: postmaster@m.3ends.info
          AM_SMTP_PASSWORD: "{{ _vault.postfix_smtp_password }}"
        trigger0:
          TRIGGER_ALLOWED_HOST: ".{{ _domain_name }}"
          TRIGGER_PUSHBULLET_TOKEN: "{{ _vault.trigger_pushbullet_token }}"
          TRIGGER_SECRET_KEY: "{{ _vault.trigger_secret_key }}"
          TRIGGER_SUPERUSER_PASSWORD: "{{ _vault.trigger_superuser_password }}"
        webtools0:
          WEBTOOLS_ALLOWED_HOST: ".{{ _domain_name }}"
          WEBTOOLS_SECRET_KEY: "{{ _vault.webtools_secret_key }}"
          WEBTOOLS_AWS_ACCESS_KEY_ID: 66aa7319
          WEBTOOLS_AWS_SECRET_ACCESS_KEY: "{{ _vault.webtools_minio_secret_key }}"
          WEBTOOLS_AWS_S3_CUSTOM_DOMAIN_HOSTNAME: "{{ _domain_name }}"
          MINIO_ACCESS_KEY: 66aa7319
          MINIO_SECRET_KEY: "{{ _vault.webtools_minio_secret_key }}"
          # MINIO_DOMAIN: "{{ _domain_name }}"
        gitea0:
          SERVER_LFS_JWT_SECRET: "{{ _vault.gitea_server_lfs_jwt_secret }}"
          SECURITY_SECRET_KEY: "{{ _vault.gitea_security_secret_key }}"
          SECURITY_INTERNAL_TOKEN: "{{ _vault.gitea_security_internal_token }}"
          OAUTH2_JWT_SECRET: "{{ _vault.gitea_oauth2_jwt_secret }}"
          # Must be consistent with gitea_ssh_passthrough
          USER: gitea
          USER_UID: 1002
          USER_GID: 1002
      docker_pm2:
        10sr_bot0:
          state: started
          command: docker-compose up --build
        instiki0:
          state: started
          command: docker-compose up --build
        mastodon0:
          state: stopped
          command: sh ./up.sh
        nextcloud0:
          state: started
          command: docker-compose up --build
        plex0:
          state: stopped
          command: docker-compose up --build
        gitea0:
          state: started
          command: docker-compose up --build
        gitbucket0:
          state: stopped
          command: docker-compose up --build
        prometheus0:
          state: stopped
          command: sh ./up.sh
        cowrie0:
          state: stopped
          command: docker-compose up --build
        trigger0:
          state: started
          command: docker-compose up --build
        webtools0:
          state: stopped
          command: docker-compose up --build

    - role: mastodon_nginx_proxy
      mastodon_server_name: st.{{ _domain_name }}
      mastodon_s3_server_name: minio.st.3ends.info
      mastodon_s3_port: 9000
      mastodon_web_port: 3000
      mastodon_stream_port: 4000
      # Remove later!
      mastodon_proxy_letsencrypt_access_dir: /.well-known/acme-challenge
      mastodon_proxy_letsencrypt_webroot: /var/nginx/main

    - role: postfix
      postfix_root_alias: 8.slashes@gmail.com

    - role: mackerel_agent
      mackerel_agent_apikey: "{{ _vault.mackerel_agent_apikey }}"

    - role: prometheus_node_exporter
      # TODO: How to restart after update?
      prometheus_node_exporter_args: >-
        --collector.diskstats.ignored-devices="^(ram|loop|fd)\\d+$"
        --web.listen-address=localhost:9100
      prometheus_node_exporter_script: /usr/local/bin/prometheus_node_exporter.sh

    - role: java_jre

    # - role: jenkins
    #   vars:
    #     jenkins_deb:
    #       url: https://pkg.jenkins.io/debian-stable/binary/jenkins_2.204.1_all.deb
    #       sha512: 76caa3218b72a8eea8dd98352ab862a935d832cc7d563a2db3da39ceaab4f0c3c47b6a036d7630a7a89da8af83c15bf647085138f7632fdceeccab5924cca466
    #     jenkins_webuser_username: 10sr
    #     jenkins_webuser_password: "{{ _vault.jenkins_webuser_password }}"
    #     # TODO: This value is too big so separete into file
    #     jenkins_webuser_ssh_publickey:
    #       - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCy90M0oZocY2AMrk8DUYNaHacamzOW+A+NNsXSTdLqj/k45pg6WiT8hnYBUXnVLJPoOQknFLFLKaC9YUX1iiz2aiH/aFn83W5og7NGlhkcFmti9tQwql7gB5/Y0N/DoRVWUXoi/Iy69LU7dMQQOAM9yvOwTl86djVOVpjhI/KPkPGpiddXjqruBcOpmymtfZJpFDqIskfBse7f+e0oYrYlZkTD8mxQyrjpacR0qvcRTJ6EE+bxqY8+ONA9hEahZ426au1mPni4L2DZrrG77gNwE2c4T/mMGrM7zw3MjZeZAtgHXwik0yw31eTHyJeDniDdEcFxL80nOJIk69YwcRM/ y_k@dw.local
    #       - ssh-dss AAAAB3NzaC1kc3MAAACBAPCPLZTNmb6QBrrERXD3gulK346Ik4SluA0YiXK//h4OSBEv22eAG9/prLviDxHVNYpViYLMFGGYAlbCl2m6O5bzN0BRKZVEaCug8WzSkYGUfFK4aXdWbJ1pzGZbWWp/kFOSTrv+oCz8BRvaEME2sC7boTWmhjV4PyJWMaoLOn4xAAAAFQDoyQ/E/PRdSAfmNcM+CM7iq9AReQAAAIEA6f8HI2HsrF2a9OC2m/RDAHDLC06hzLa4yMdWRsnyFIFtaccMpWA+z44H1pax4olQ20FS7RRuE6BLLYUUTTeFQ0NJiG+d+PPViozhV7tkpStcqGSBEULpWALCEB+CAmsGAPhQG+Niu/xHdl5RVPsyIiSNPn/LC6yGgNOJVy12b94AAACBAJqjG305JHNqFOA93+j+1lpYigJyL1YR5rQWTEFtM+ibCJgmykrk6LYfxCpi2ZzQAmWlph6ZFy9aSovdXfyIzQxA89LA46nmhHTCVLGZ9Xc2JgJeazQUMSAXPfIJ6Ru/6xuUjL9cmSv8AN8pDXQ49oNEMZETrNohCxLSx3fR37zM yuk@darwin-mba.local
    #       # Key of remote ansible normal user
    #       - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCgAL0Sasj/Z9SsNpfGib/kl4Y3ffaBDa9EIqONhBKqvbG2WxbP76r2LOrNQFZKM6VAjGd2raD24tT3kk/ZlA6JvjETFHIzPDyLMzqvnC9Q93qM8O2mHi7juVQXx0Oqs4M5Vvx+F3AlQFYDwOgjnxfTE2gEZadJabygOq5J7gQfxS5XaFc5nFFXpSrXOk0IAH4v3gKvLbVliLAhvkgebkjAv0m9ooxvX64/gNv50edB92KV8tfBpn5Oqm6hAyxa0r+XsBsC3612JKKHegIEnBaB/0PdMpWb6tbAg376tYu1AwSNUi5/lzJt6s8Fh1ZqdwO634B7eHeZN3mJojcwwnpV yuk@tk2-407-44672

    #     jenkins_serveruser_password: "{{ _vault.jenkins_serveruser_password }}"
    #     jenkins_serveruser_password_salt: "{{ ansible_mounts.0.uuid.replace('-', '')[:16] }}"

    #     jenkins_plugins:
    #       - ansicolor
    #       - job-dsl
    #       - authorize-project
    #       - simple-theme-plugin
    #       - slack
    #       - prometheus

    #     # https://github.com/afonsof/jenkins-material-theme/
    #     jenkins_theme_css_url: https://cdn.rawgit.com/afonsof/jenkins-material-theme/gh-pages/dist/material-blue-grey.css

    #     # jenkins_system_properties:
    #     #   - key: hudson.DNSMultiCast.disabled
    #     #     value: "true"
    #     #   - key: hudson.udp
    #     #     value: "-1"

    #     # https://issues.jenkins-ci.org/browse/JENKINS-10160
    #     # https://stackoverflow.com/questions/31740373/how-can-i-prevent-that-the-jenkins-log-gets-spammed-with-strange-messages
    #     # https://www.ionutgavrilut.com/2018/jenkins-floods-with-DNS-errors/
    #     jenkins_java_args: >-
    #       -Dhudson.DNSMultiCast.disabled=true
    #       -Dhudson.udp=-1

    # - role: jenkins_bootstrap_job
    #   vars:
    #     jenkins_bootstrap_job_name: jenkins-bootstrap-job
    #     jenkins_bootstrap_job_webuser_username: 10sr
    #     jenkins_bootstrap_job_webuser_password: "{{ _vault.jenkins_webuser_password }}"
    #     jenkins_bootstrap_job_repository_url: https://github.com/10sr/machine-setups.git
    #     jenkins_bootstrap_job_jobdsl_target: sakura/jenkins-jobs/src/jobs/*.groovy

    #     jenkins_bootstrap_job_environments:
    #       P_TXT_REPOSITORY_URL: "{{ _vault.p_txt_repository_url }}"

    - role: jenkins_nginx_proxy
      jenkins_nginx_proxy_port: 8080
      jenkins_nginx_proxy_server_name: "jk.{{ _domain_name }}"

    - role: systemd_service
      # TODO: Start docker pm2
      systemd_service_services:
        - name: local-prometheus-node-exporter
          state: started
          enabled: yes
          unit:
            description: prometheus node exporter
            # TODO: Parametrize node_exporter path
            execstart: /usr/local/bin/prometheus_node_exporter.sh
            type: simple

    - role: nfs
      vars:
        nfs_path: /var/lib/data/nfs/kubernetes
        nfs_exports_content: |
          /var/lib/data/nfs/kubernetes tk2-407-44672.vs.sakura.ne.jp(rw,sync,no_root_squash,no_subtree_check)

    - role: kubernetes
      vars:
        kubernetes_ubuntu_codename: "{{ _ubuntu_codename }}"

    - role: gitea_ssh_passthrough
      # when: no
      vars:
        gitea_ssh_passthrough_user:
          name: gitea
          uid: 1002
          group: gitea
          gid: 1002
          home: /home/gitea
        gitea_ssh_passthrough_container_ssh_port: 222
        gitea_ssh_passthrough_container_data_dir: /var/lib/data/docker/gitea0/data

    - role: mysql
      vars:
        mysql_databases:
          - name: airflow
            # Avoid 1071 error
            # https://stackoverflow.com/questions/42260618/apache-airflow-mysql-specified-key-was-too-long-max-key-length-is-1000-bytes
            encoding: ascii
        mysql_users:
          - name: "10sr"
            password: "{{ _vault.mysql_password_10sr }}"
            priv: "*.*:ALL"
            host: "%"
          - name: "airflow"
            password: "{{ _vault.mysql_password_airflow }}"
            priv: "airflow.*:ALL"
            host: "%"

    - role: ldap
      vars:
        ldap_rootpw: "{{ _vault.ldap_rootpw }}"


  post_tasks:
    - file:
        state: link
        src: /var/lib/data/docker/nextcloud0/html/data/10sr/files/www
        dest: /var/nginx/main/nc
      become: yes

    - name: Create kubernetes hostPath directory
      file:
        state: directory
        path: /var/lib/data/kubernetes-hostpath
      become: yes

    - name: Write timestamp file
      copy:
        content: "{{ _this_revision_timestamp }}"
        dest: "{{ _revision_timestamp_file }}"
      become: yes

    - name: Create last revision file
      copy:
        dest: "{{ _revision_yaml }}"
        content: "{{ _this_revision | to_nice_yaml }}"
      become: yes
